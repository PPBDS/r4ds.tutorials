## Priorities

### Current items

Install RStudio Chocolate Cosmos and then do a bunch of things listed below in the Chocolate Cosmos section below.


### Specific Chapter Issues

Rewrite Chapter 1. Maybe include some material from r4ds-material-to-add.txt. 

Check to make sure that the plots only use things which have been taught, especially oecd and portland in chapters 10 and 11.

Q&A sections, at least in RStudio and Code.

Left off tutorial improvements at Chapter 14 (strings), which was completed.

Chapters 21, 22, 26 and 27 are OK, but could still use a lot of clean up.

Make more use of https://ggplot2-book.org/ and https://docs.posit.co/ide/user/

Maybe much of the material in Quarto R4DS chapter belongs in RStudio and Github chapter, allowing Quarto tutorial to focus on projects.

Do RStudio and Code and RStudio and Github tutorials link up well together? Note that the former does do an RPubs publishing at the end. 

The styler package and its use seem important and worth discussing. See https://www.youtube.com/watch?v=_nAfJ-5nkcU&authuser=0 for other interesting options.


### format_tutorial hackery

Biggest hackery is our use of the "file =" trick to bring in code examples which would mess up the formatting of this document (and, even worse, mess up the use of format_tutorial()) if we just included them raw, like with ```` or ````markdown or ````{verbatim}. The trick works in that nothing breaks. But it is annoying! We would much rather see the code which we are including **right there** instead of having to look it up in a separate file.

More details: parsermd(), used by format_tutorial(), is finicky. We don't want it to consider the headers in this example QMD as "real" headers. We want them to be ignored. Seems like the only way to do that is to include the entire document in an R code chunk with three backticks. Then, format_tutorial() does what we want. But! Then knitting the tutorial fails totally. You need to switch to four backticks, at the start and end. Knitting is now fine, but, if you run format_tutorial(), you will mess up the exercise numbering and chunk labels. Could not solve this! So, just use "file =" trick. Using other code examples, like empty chunks, does not mess up format_tutoria() but does mess up the displayed outline of this document, which is annoying.

### Chocolate Cosmos

The forthcoming release of RStudio, Chocolate Cosmos, includes Quarto 1.4 (I think). If so, we can remove a bunch of stuff in the Code/Github tutorials about installing Quarto CLI and quarto() ourselves. By default, students will have everything they need. 

These tools also provide us a chance of getting rid of Rpubs and doing everything with quarto.

Posit Cloud is the future. RPubs is the past. Replace RPubs everywhere with Posit Cloud, and test that it works! rsconnect seems like a much more important package than I used to think, or maybe it is really devoted to Posit Connect?

Update RStudio and Github to use Quarto 1.4. (Check RStudio and Code as well.) Probably want to switch away from command line to quarto() commands, at least for the first example. Then show the command line in a third example. Maybe?

Looks like we could stop using RPubs because Quarto Pub allows you to publish a single document:

quarto publish quarto-pub document.qmd

### Graduation Exercises

Jade's idea for "Exploration" sections at the end of each tutorial. Give students some choices. Let them explore. Let them make something. There is no wrong answer.

Might be nice if each middle chapter tutorial (like factors, dates and times, et cetera) finished with a beautiful plot which required the use of skills from that chapter to manipulate the data first. An example is babynames in Strings chapter.

Even better, instead of a line-by-line plot built in the tutorial, we should have students create this plot oustide of the tutorial. It should be an exercise, like RStudio and Github, which starts with a student making a repo, connecting it to an RStudio project, starting a quarto document, loading libraries and data, building a plot, rendering the document so it looks nice and then publishing the plot on the web. Students need more practice with all these steps.
